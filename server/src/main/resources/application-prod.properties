# Production Database Configuration (PostgreSQL)
# spring.datasource.url=${POSTGRES_DATABASE_URL}
# spring.datasource.username=${POSTGRES_DATABASE_USERNAME}
# spring.datasource.password=${POSTGRES_DATABASE_PASSWORD}
spring.datasource.url=${NEON_POSTGRES_DATABASE_URL}
spring.datasource.username=${NEON_POSTGRES_DATABASE_USERNAME}
spring.datasource.password=${NEON_POSTGRES_DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate settings (no auto schema changes in prod)
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

# Enable SQL logging only for debugging
#logging.level.org.springframework=INFO

# Email Sender Configuration Pt. 2
# spring.mail.username=${EMAIL_USER}
# spring.mail.password=${EMAIL_PASSWORD}
# email.base=${DEFAULT_EMAIL_FROM}


# Cache Configuration For Production
# Enable content-based versioning for static resources
spring.web.resources.chain.strategy.content.enabled=true
spring.web.resources.chain.strategy.content.paths=/**


# Thymeleaf Templating Configuration
# spring.thymeleaf.enabled=true
spring.thymeleaf.cache=true


# API key for frontend access
api.key=${SECRET_API_KEY}

# API URL for frontend access
api.client.url=${CLIENT_URL}


# Cloudinary Configuration
cloudinary.cloud-name=${PROD_CLOUDINARY_CLOUD_NAME}
cloudinary.api-key=${PROD_CLOUDINARY_API_KEY}
cloudinary.api-secret=${PROD_CLOUDINARY_API_SECRET}


# Developer Information
dev.name=${DEV_NAME}
dev.email=${DEV_EMAIL}
dev.phone=${DEV_PHONE}
dev.website.url=${CLIENT_URL}
dev.github=${DEV_GITHUB}



# Spring Data JPA Batch Processing Configuration
spring.jpa.properties.hibernate.jdbc.batch_size=200
# spring.jpa.properties.hibernate.order_updates=true
# spring.jpa.properties.hibernate.order_inserts=true


# Superuser Properties
superuser.username=${ADMIN_USERNAME}
superuser.email=${ADMIN_EMAIL}
superuser.password=${ADMIN_PASSWORD}